#!/usr/bin/env node

// Load environment variables first
require('dotenv').config();

/**
 * Script para ejecutar la migraci√≥n inicial del sistema Fisca
 * 
 * Uso:
 *   node migrations/run-migration.js                    # Ejecutar migraci√≥n normal
 *   node migrations/run-migration.js --down             # Revertir migraci√≥n
 *   node migrations/run-migration.js --clean            # Clean restart (drop all tables)
 *   node migrations/run-migration.js --sync             # Sync models after migration
 *   node migrations/run-migration.js --clean --sync     # Clean restart + sync models
 */

const { sequelize } = require('../models');
const migration = require('./001_initial_setup');

async function runMigration() {
  const args = process.argv.slice(2);
  const isRollback = args.includes('--down') || args.includes('-d');
  const isCleanRestart = args.includes('--clean') || args.includes('-c');
  const isSyncForce = args.includes('--sync') || args.includes('-s');
  
  try {
    console.log(`üîÑ ${isRollback ? 'Revertiendo' : 'Ejecutando'} migraci√≥n inicial...`);
    
    if (isRollback) {
      await migration.down(sequelize.getQueryInterface(), sequelize);
      console.log('‚úÖ Migraci√≥n revertida exitosamente');
    } else {
      // Pass options to migration
      const options = {
        cleanRestart: isCleanRestart,
        syncForce: isSyncForce
      };
      
      if (isCleanRestart) {
        console.log('üßπ Clean restart mode enabled');
      }
      
      if (isSyncForce) {
        console.log('üîÑ Sync force mode enabled');
      }
      
      await migration.up(sequelize.getQueryInterface(), sequelize, options);
      console.log('‚úÖ Migraci√≥n ejecutada exitosamente');
    }
    
    console.log('\nüìã Resumen:');
    if (!isRollback) {
      console.log('   ‚Ä¢ Roles del sistema creados');
      console.log('   ‚Ä¢ Permisos del sistema configurados');
      console.log('   ‚Ä¢ Usuario admin creado (admin@fisca.com / 123456)');
      console.log('   ‚Ä¢ Affiliate LLA creado');
      console.log('   ‚Ä¢ Asociaciones de roles y permisos establecidas');
    } else {
      console.log('   ‚Ä¢ Todos los datos de la migraci√≥n han sido eliminados');
    }
    
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error.message);
    process.exit(1);
  } finally {
    await sequelize.close();
  }
}

// Verificar que la base de datos est√© disponible
async function checkDatabase() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n a la base de datos establecida');
    return true;
  } catch (error) {
    console.error('‚ùå No se pudo conectar a la base de datos:', error.message);
    console.log('\nüí° Aseg√∫rate de que:');
    console.log('   ‚Ä¢ La base de datos est√© ejecut√°ndose');
    console.log('   ‚Ä¢ Las variables de entorno est√©n configuradas');
    console.log('   ‚Ä¢ Los modelos est√©n correctamente configurados');
    return false;
  }
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Sistema Fisca - Migraci√≥n Inicial\n');
  
  if (!(await checkDatabase())) {
    process.exit(1);
  }
  
  await runMigration();
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { runMigration, checkDatabase };
